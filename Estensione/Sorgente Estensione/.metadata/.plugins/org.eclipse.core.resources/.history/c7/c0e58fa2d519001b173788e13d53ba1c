package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import data.Data;
import data.TrainingDataException;
import tree.LeafNode;
import tree.RegressionTree;
import tree.SplitNode;

public class ServerOneClient extends Thread{

	private Socket socket;
	private ObjectInputStream in;
	private ObjectOutputStream out;
	
	
	
	public ServerOneClient(Socket s) throws IOException{

		this.socket=s;
		//inizializzazione degli stream di input e output che il server userà per cominicare con il client
		in=new ObjectInputStream (socket.getInputStream());
		out= new ObjectOutputStream(socket.getOutputStream());
		start();
		
		
	}
	
public void run() {
	try {
		RegressionTree tree=null;
		Data trainingSet=null;
		String tableName="";
		try {
			Object anw= in.readObject();
			if(anw.equals(0)) {
				//try{
					tableName=(String) in.readObject();
					trainingSet= new Data(tableName);	
					out.writeObject("OK");	
					if(in.readObject().equals(1)) {
						tree=new RegressionTree(trainingSet);
						try {
							tree.salva(tableName+".dmp");
							tree.printRules();
							tree.printTree();
							out.writeObject("OK");	
						} catch ( IOException  e) {
							
							System.out.println(e.toString());
						}
			
					}
				/*}
				catch(TrainingDataException e){
					System.out.println(e);
					out.writeObject(e.getMessage());	
					}*/
			
			
			}else if (anw.equals(2)){
				
				tableName= (String) in.readObject();
				try {
					tree=RegressionTree.carica(tableName+".dmp");
					
					tree.printRules();
					tree.printTree();
					out.writeObject("OK");	
				} catch (ClassNotFoundException | IOException e) {
					System.out.print(e);
					out.writeObject(e.getMessage());	
					
				}	
			}
			
			while (in.readObject().equals(3)){
			
						try {
							Double pred = predictClass(tree,in, out);
							out.writeObject("OK");
							//if(pred==-1) {
							//	throw new UnknownValueException("Error in the prediction phase");
						//	}
							out.writeObject(pred);
						}catch(UnknownValueException e) {
							//System.out.println(e);
							out.writeObject(e.getMessage());	
						}
					
			
		}
		}catch(TrainingDataException | IOException e) {
			out.writeObject(e.getMessage());
			return;
		}
		
			}catch( IOException e) {
			try {
				socket.close();
			}catch(IOException e1) {
				System.out.println(e1);
			}
		}catch(ClassNotFoundException  e2){
			System.out.println(e2);
		}
		finally {
			try {
				socket.close();
			}catch(IOException e) {
				System.out.println("Socket not closed!");
			}
		}
	
	} 
	
	
	
	public Double predictClass(RegressionTree tree,ObjectInputStream in, ObjectOutputStream out ) throws UnknownValueException, IOException, ClassNotFoundException{ //uso di RTTI
		
	//	try {
				
		if(tree.getRoot() instanceof LeafNode) {
			
			return ((LeafNode) tree.getRoot()).getPredictedClassValue();
		}else
		  {
			out.writeObject("QUERY");
			int risp;
			
			out.writeObject(((SplitNode)tree.getRoot()).formulateQuery());
			risp=(int)in.readObject();
			if(risp==-1 || risp>=tree.getRoot().getNumberOfChildren()) {
				throw new UnknownValueException("The answer should be an integer between 0 and " +(tree.getRoot().getNumberOfChildren()-1)+"!");
			}else {
				
				return predictClass(tree.getChildTree(risp),in,out);
			}
	      }
		//}catch(IOException | ClassNotFoundException e) {
			//System.out.print(e);
			//return (double) -1;
		//}
	}
	
}
	
